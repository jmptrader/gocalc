; basic print tests
(print 24)
(print (+ (* 3 10) 6))
(print)
(print "test string")
(print)

; The follow section contains errors
; uncomment each line to produce the error
;a
;24
;"asdf"
;+(+ 2 3))
;((+ 2 3))
;()
;(foo)
;(+ "foo" "bar")
;(set +)
;(print +)
;(print b)

; set a variable and print the result
(set a (- 5 2))
(print a)
(print)

; Another deliberate error, uncomment to see it
;(a 3)

; define tests
(define f (+ 2 3))
(print (f))
(define (square x) (* x x))
(print(square 10))
(define (add_to_a x) (+ a x))
(print (add_to_a 7))
(define (add_a_to_b a b) (+ a b))
(print (add_a_to_b 9 10))
(define (Double a)
	(define (dbl b) (* b 2))
	(dbl a))
(print (Double 8))
(define (PrintTwice a)
	(print a)
	(print a))
(PrintTwice 13)
(define (add a b) (+ a b))
(print "(add 2 3):" (add 2 3))
(define (my-print x) (print x))
(my-print "my-print")
(define (decr x)
	(set y (- x 1))
	y)
(print (decr 3))
(print)

; A couple more deliberate errors. Uncomment to see them
;(print "(add 1):" (add 1))
;(print "(add 1 2 3):" (add 1 2 3))

; comparison tests
(print (< 1 2))
(print (>= 3 3))
(print (<> 3 3))
(print (if (> 2 1) (+ 2 3) (- 3 2)))
(if 1 ; I'm sorry, but this is so awesome that it works
	(print 2)
	(print 3))
(print)

; logical tests
(print (and 1 1))
(print (and 1 0))
(print (and 0 0))
(print (or 1 1))
(print (or 1 0))
(print (or 0 0))
